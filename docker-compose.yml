version: "3.9"

services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u root -p$${MYSQL_ROOT_PASSWORD} --silent"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks: [app-net]
    restart: unless-stopped

  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    ports:
      - "9092:9092"                          # listener interno (entre containers)
      - "${KAFKA_EXTERNAL_PORT:-9094}:9094"  # listener externo (host/VS usa este)
    environment:
      # KRaft (sem ZooKeeper)
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093

      # Listeners: interno (containers), externo (host) e controller
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,EXTERNAL://:9094,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:${KAFKA_EXTERNAL_PORT:-9094}
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

      # Qualidade de vida em dev
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_NUM_PARTITIONS=3
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 20
    networks: [app-net]
    restart: unless-stopped

  # Cria os tópicos necessários antes de você iniciar os serviços no VS
  kafka-init:
    image: bitnami/kafka:3.7
    container_name: kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["/bin/bash", "-c"]
    command: >
      "
      /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092
        --create --if-not-exists --topic propostas-created --partitions 3 --replication-factor 1;
      /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092
        --create --if-not-exists --topic propostas-status-changed --partitions 3 --replication-factor 1;
      echo 'Topics ready';
      "
    networks: [app-net]

  # UI para inspecionar o Kafka
  kafdrop:
    image: obsidiandynamics/kafdrop:4.0.2
    container_name: kafdrop
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
      JVM_OPTS: "-Xms32m -Xmx128m"
    ports:
      - "9000:9000"
    networks: [app-net]
    restart: unless-stopped

networks:
  app-net:

volumes:
  mysql_data:
  kafka_data:
